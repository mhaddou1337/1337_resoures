---
import { buttonVariants } from "@/components/ui/button";
import ThemeToggle from "@/components/ThemeToggle.astro";

const { pathname } = Astro.url;

---

<header
  class="bg-background/95 supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50 w-full border-b backdrop-blur"
>
  <div
    class="container flex h-16 items-center space-x-4 sm:justify-between sm:space-x-0"
  >
    <div class="flex gap-6 md:gap-10">
      <a href="/" class="flex items-center space-x-2">
        <span class="inline-block font-bold">1337 Resources</span>
      </a>
    </div>
    <div class="flex flex-1 items-center justify-end space-x-4">
      <nav class="flex items-center space-x-2">
        <a
          href="/sign-in"
          id="sign-in-btn"
          data-auth-button="sign-in"
          class={buttonVariants({ 
            variant: "ghost"
          }) + " transition-all duration-200 hover:bg-accent/10"}
        >
          Sign in
        </a>

        <div id="user-info" class="hidden items-center space-x-2">
          <img id="user-avatar" src="" alt="User avatar" class="w-8 h-8 rounded-full hidden object-cover border border-border" />
          <span id="user-name" class="text-sm font-medium"></span>
          <button
            id="sign-out-btn"
            class={buttonVariants({ 
              variant: 'ghost'
            })}
          >
            Sign out
          </button>
        </div>
        <ThemeToggle />
      </nav>
    </div>
  </div>
</header>

<script>
  import { isAuthenticated, getCurrentUser, logout } from '../utils/auth';

  const updateAuthUI = () => {
    const userInfo = document.getElementById('user-info');
    const signInButton = document.getElementById('sign-in-btn');
    const userAvatar = document.getElementById('user-avatar') as HTMLImageElement;
    const userName = document.getElementById('user-name');
    const signOutBtn = document.getElementById('sign-out-btn');
    
    if (isAuthenticated()) {
      const user = getCurrentUser();
      if (user && userInfo && signInButton && userAvatar && userName) {
        // Show user info
        userInfo.classList.remove('hidden');
        userInfo.classList.add('flex');

        // Completely remove sign in button from DOM when logged in
        signInButton?.remove();

        // Update user info
        if (!userName) return;
        
        // Update user info
        userName.textContent = user.displayname;
        
        // Use medium version of avatar if available, fallback to link
        const avatarUrl = user.image.versions.medium || user.image.link;
        if (avatarUrl) {
          userAvatar.src = avatarUrl;
          userAvatar.alt = `${user.displayname}'s avatar`;
          userAvatar.classList.remove('hidden');
        } else {
          // Hide avatar if no image is available
          userAvatar.classList.add('hidden');
        }
      }
    } else {
      // Show sign in button
      if (userInfo && signInButton) {
        userInfo.classList.add('hidden');
        userInfo.classList.remove('flex');
        signInButton.classList.remove('hidden');
      }
    }
  };

  const updateButtonStyles = () => {
    const isDark = document.documentElement.classList.contains('dark');
    const currentPath = window.location.pathname;
    
    const signInButton = document.querySelector('[data-auth-button="sign-in"]');
    
    if (!signInButton) return;

    const updateButton = (button: Element, isActive: boolean) => {
      const baseClasses = "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50";
      const sizeClass = 'h-9 px-4 py-2';
      const ghostClasses = "hover:bg-accent hover:text-accent-foreground";
      button.className = `${baseClasses} ${sizeClass} ${ghostClasses} transition-all duration-200`;
    };

    updateButton(signInButton, currentPath === '/sign-in');
  };

  // Handle sign out
  document.getElementById('sign-out-btn')?.addEventListener('click', () => {
    logout();
    window.location.href = '/';
  });

  // Initial updates
  updateAuthUI();
  updateButtonStyles();

  // Update styles on theme change
  document.addEventListener('theme-change', updateButtonStyles);

  // Update auth UI when storage changes (e.g. when logging in from another tab)
  window.addEventListener('storage', (e) => {
    if (e.key === 'user') {
      updateAuthUI();
    }
  });
</script>
