---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import CategorySelect from "@/components/CategorySelect";
import UserMention from "@/components/UserMention";
import VoteButtons from "@/components/VoteButtons";
import {
  type Resource,
  type Comment,
  type ResourceVote,
} from "@/utils/resources";

const categories = [
  "Mathematics",
  "Science",
  "Programming",
  "Languages",
  "Humanities",
];

const categoryLabels: Record<string, string> = {
  "": "Select a category",
  Mathematics: "Mathematics",
  Science: "Science",
  Programming: "Programming",
  Languages: "Languages",
  Humanities: "Humanities",
};
---

<BaseLayout title="Resources">
  <main class="container mx-auto mt-8 px-4">
    <div
      id="resources-content"
      class="opacity-0 transition-opacity duration-300"
    >
      <!-- Grid layout for main content and sidebar -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        <!-- Main content area (3/4) -->
        <div
          class="md:col-span-3 space-y-6 max-h-[calc(100vh-8rem)] overflow-y-auto pr-4"
        >
          <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold">Collaborative Resources</h1>
            <Button id="show-form-btn" variant="default"
              >Share a Resource</Button
            >
          </div>

          <!-- Resource Submission Form -->
          <div
            id="resource-form-container"
            class="hidden mb-8 p-6 border rounded-lg shadow-sm bg-background"
          >
            <h2 class="text-2xl font-semibold mb-6">Share a Resource</h2>
            <form id="resource-form" class="space-y-6">
              <div>
                <label for="title" class="block text-sm font-semibold mb-2"
                  >Title</label
                >
                <input
                  type="text"
                  id="title"
                  required
                  minlength="3"
                  maxlength="64"
                  class="w-full rounded-md border p-3 bg-background text-foreground break-words"
                  placeholder="Enter a descriptive title"
                />
              </div>
              <div>
                <label for="category" class="block text-sm font-semibold mb-2"
                  >Category</label
                >
                <CategorySelect
                  client:load
                  categories={categories}
                  name="category"
                  required
                  className="w-full"
                />
              </div>
              <div>
                <label
                  for="description"
                  class="block text-sm font-semibold mb-2">Description</label
                >
                <textarea
                  id="description"
                  required
                  minlength="10"
                  maxlength="500"
                  rows="4"
                  class="w-full rounded-md border p-3 bg-background text-foreground"
                  placeholder="Provide a detailed description of the resource"
                ></textarea>
              </div>
              <div>
                <label for="link" class="block text-sm font-semibold mb-2"
                  >Resource Link</label
                >
                <input
                  type="url"
                  id="link"
                  required
                  pattern="^https://.*"
                  class="w-full rounded-md border p-3 bg-background text-foreground"
                  placeholder="https://"
                />
              </div>

              <!-- Posting Guidelines -->
              <div class="p-4 bg-blue-50 dark:bg-blue-900/50 rounded-lg">
                <h3 class="text-sm font-semibold mb-2">Posting Guidelines</h3>
                <ul
                  class="list-disc list-inside space-y-1 text-sm text-gray-700 dark:text-gray-300"
                >
                  <li>Share educational content that benefits the community</li>
                  <li>Properly attribute sources and respect copyright</li>
                  <li>Ensure content is relevant to the selected category</li>
                  <li>Keep discussions constructive and respectful</li>
                </ul>
              </div>

              <Button type="submit" variant="default" className="w-full py-3">
                Share Resource
              </Button>
            </form>
          </div>

          <!-- Shared Resources List -->
          <div class="mb-8">
            <div class="flex justify-between items-center mb-4">
              <h2 class="text-2xl font-semibold">Community Resources</h2>
              <CategorySelect
                client:load
                categories={categories}
                className="w-[180px]"
                placeholder="All Categories"
                onValueChange={(value) => {
                  const event = new CustomEvent("categoryFilterChange", {
                    detail: value,
                  });
                  document.dispatchEvent(event);
                }}
              />
            </div>
            <div id="resources-list" class="space-y-4 mb-4">
              <!-- Resources will be dynamically inserted here -->
              <div class="text-center py-4">Loading resources...</div>
            </div>
          </div>

          <!-- Role-specific Resources -->
          <div id="admin-resources" class="hidden space-y-6">
            <h2 class="text-2xl font-semibold">Administrative Resources</h2>
            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div class="p-4 border rounded-lg shadow-sm">
                <h3 class="font-semibold mb-2">User Management</h3>
                <p class="text-gray-600 dark:text-gray-400 mb-4">
                  Manage user accounts and permissions
                </p>
                <Button variant="outline" className="w-full">Access</Button>
              </div>
              <div class="p-4 border rounded-lg shadow-sm">
                <h3 class="font-semibold mb-2">System Settings</h3>
                <p class="text-gray-600 dark:text-gray-400 mb-4">
                  Configure system parameters
                </p>
                <Button variant="outline" className="w-full">Access</Button>
              </div>
              <div class="p-4 border rounded-lg shadow-sm">
                <h3 class="font-semibold mb-2">Analytics Dashboard</h3>
                <p class="text-gray-600 dark:text-gray-400 mb-4">
                  View system analytics and reports
                </p>
                <Button variant="outline" className="w-full">Access</Button>
              </div>
            </div>
          </div>

          <!-- Student Resources -->
          <div id="student-resources" class="hidden space-y-6">
            <h2 class="text-2xl font-semibold">Student Resources</h2>
            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div class="p-4 border rounded-lg shadow-sm">
                <h3 class="font-semibold mb-2">Learning Materials</h3>
                <p class="text-gray-600 dark:text-gray-400 mb-4">
                  Access course materials and guides
                </p>
                <Button variant="outline" className="w-full">Access</Button>
              </div>
              <div class="p-4 border rounded-lg shadow-sm">
                <h3 class="font-semibold mb-2">Assignments</h3>
                <p class="text-gray-600 dark:text-gray-400 mb-4">
                  View and submit your assignments
                </p>
                <Button variant="outline" className="w-full">Access</Button>
              </div>
              <div class="p-4 border rounded-lg shadow-sm">
                <h3 class="font-semibold mb-2">Progress Tracker</h3>
                <p class="text-gray-600 dark:text-gray-400 mb-4">
                  Monitor your learning progress
                </p>
                <Button variant="outline" className="w-full">Access</Button>
              </div>
            </div>
          </div>
        </div>

        <!-- Sidebar (1/4) -->
        <div class="space-y-6 md:sticky md:top-8">
          <!-- Search Box -->
          <div class="p-4 border rounded-lg shadow-sm bg-background">
            <h3 class="font-semibold mb-4">Search Resources</h3>
            <div class="space-y-4">
              <input
                type="search"
                placeholder="Search by title or description..."
                class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                id="resource-search"
              />
            </div>
          </div>

          <!-- Recommended Categories -->
          <div class="p-4 border rounded-lg shadow-sm bg-background">
            <h3 class="font-semibold mb-4">Recommended Categories</h3>
            <div class="flex flex-wrap gap-2">
              {
                categories.map((category) => (
                  <Button
                    variant="outline"
                    size="sm"
                    className="category-filter-btn"
                    data-category={category}
                  >
                    {category}
                  </Button>
                ))
              }
            </div>
          </div>

          <!-- Top Contributors -->
          <div class="p-4 border rounded-lg shadow-sm bg-background">
            <h3 class="font-semibold mb-4">Top Contributors</h3>
            <div id="top-contributors" class="space-y-3">
              <div class="text-sm text-gray-500">Loading contributors...</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div id="auth-error" class="hidden">
      <Alert variant="destructive">
        <p>Please sign in to access resources</p>
      </Alert>
    </div>
  </main>
</BaseLayout>

<script>
  import { getCurrentUser, isAuthenticated, getUserData } from "../utils/auth";
  import {
    getSharedResources,
    saveResource,
    getResourcesByCategory,
    deleteResource,
    voteResource,
  } from "../utils/resources";
  import type {
    Resource,
    ResourceAuthor,
    ResourceVote,
  } from "../utils/resources";
  import React from "react";
  import * as ReactDOM from "react-dom/client";
  import VoteButtons from "@/components/VoteButtons";
  import CommentSection from "@/components/CommentSection";

  function canModifyResource(resource: Resource, currentUser: any) {
    if (!currentUser) return false;

    // Staff members can modify any resource
    if (currentUser["staff?"] === true) return true;

    // Users can modify their own resources
    return resource.author.login === currentUser.login;
  }

  function createResourceElement(resource: Resource): HTMLElement {
    const div = document.createElement("div");
    div.className = "p-4 border rounded-lg";
    div.dataset.resourceId = resource.id;

    const isStaff =
      resource.author.role === "admin" || resource.author["staff?"] === true;
    const authorImage =
      resource.author.image?.small || "https://github.com/shadcn.png";
    const authorName =
      resource.author.usual_full_name || resource.author.name || "Anonymous";

    // Check if current user can modify this resource
    const currentUser = getCurrentUser();
    const canModify = canModifyResource(resource, currentUser);

    const actionButtons = canModify
      ? `
      <div class="flex gap-2">
        <button class="edit-resource-btn inline-flex items-center px-2.5 py-1.5 text-xs font-medium rounded text-gray-700 bg-gray-100 hover:bg-gray-200 dark:text-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
          Edit
        </button>
        <button class="delete-resource-btn inline-flex items-center px-2.5 py-1.5 text-xs font-medium rounded text-red-700 bg-red-100 hover:bg-red-200 dark:text-red-200 dark:bg-red-800/50 dark:hover:bg-red-800 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path></svg>
          Delete
        </button>
      </div>
    `
      : "";

    // Create main structure first
    div.innerHTML = `
      <div class="flex gap-4">
        <div class="vote-container"></div>
        <div class="flex-1">
          <div class="flex justify-between items-start mb-2 gap-4">
            <h3 class="font-semibold flex-1 break-words max-w-[64ch]">${resource.title}</h3>
            <div class="flex items-center gap-2 flex-shrink-0">
              <span class="text-sm px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded">${resource.category}</span>
              ${actionButtons}
            </div>
          </div>
          <div class="w-full overflow-hidden">
            <p class="text-gray-600 dark:text-gray-400 mb-3 text-sm leading-relaxed break-words whitespace-pre-line line-clamp-3">${resource.description}</p>
          </div>
          <a href="${resource.link}" target="_blank" rel="noopener noreferrer"
             class="text-blue-600 dark:text-blue-400 hover:underline">
            Access Resource
          </a>
          <div class="mt-3 text-sm text-gray-500 dark:text-gray-400">
            Shared by
            <div class="inline-flex items-center gap-1">
              <div class="username-mention" data-username="${resource.author.login}" data-name="${authorName}" data-role="${resource.author.role}" data-image="${authorImage}" data-is-staff="${isStaff}" data-usual-full-name="${resource.author.usual_full_name || ""}"></div>
              <span class="ml-1 inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent ${isStaff ? "bg-primary text-primary-foreground" : "bg-secondary text-secondary-foreground"}">${isStaff ? "Staff" : "Student"}</span>
              <span>on ${new Date(resource.timestamp).toLocaleDateString()}</span>
            </div>
          </div>
          <div class="comment-section-container"></div>
        </div>
      </div>
    `;

    // Mount vote buttons
    const voteContainer = div.querySelector(".vote-container");
    if (voteContainer) {
      const root = ReactDOM.createRoot(voteContainer);
      root.render(
        React.createElement(VoteButtons, {
          resourceId: resource.id,
          initialVotes: resource.voteCount || 0,
          onVote: async (id: string, value: number) => {
            const user = getCurrentUser();
            if (!user) {
              alert("Please sign in to vote");
              return;
            }
            try {
              await voteResource(id, user.login, value);
            } catch (error) {
              console.error("Failed to vote:", error);
            }
          },
        }),
      );
    }

    // Mount comment section
    const commentContainer = div.querySelector(".comment-section-container");
    if (commentContainer) {
      const user = getCurrentUser();
      if (user) {
        const currentUser = {
          name: user.displayname,
          role: user.kind,
          login: user.login,
          "staff?": user["staff?"],
          image: {
            small: user.image?.versions?.small || null,
          },
        };

        const commentRoot = document.createElement("div");
        commentRoot.classList.add("comment-section-root");
        commentContainer.appendChild(commentRoot);
        const root = ReactDOM.createRoot(commentRoot);

        root.render(
          React.createElement(CommentSection, {
            resourceId: resource.id,
            comments: resource.comments || [],
            currentUser: currentUser,
            onCommentAdded: (newComment) => {
              // Only update if comment doesn't exist
              const existingComments = resource.comments || [];
              if (!existingComments.find((c) => c.id === newComment.id)) {
                resource.comments = [...existingComments, newComment];
                // Re-render comments with updated data
                root.render(
                  React.createElement(CommentSection, {
                    resourceId: resource.id,
                    comments: resource.comments,
                    currentUser: currentUser,
                    onCommentAdded: () => {},
                  }),
                );
              }
            },
          }),
        );
      }
    }

    // Handle comments through onCommentAdded callback

    return div;
  }

  async function updateTopContributors() {
    const topContributorsDiv = document.getElementById("top-contributors");
    if (!topContributorsDiv) return;

    try {
      const resources = await getSharedResources();

      // Calculate total votes per user (including negative)
      const userVotes = new Map<
        string,
        { votes: number; author: ResourceAuthor }
      >();

      resources.forEach((resource) => {
        const currentVotes = userVotes.get(resource.author.login)?.votes || 0;
        userVotes.set(resource.author.login, {
          votes: currentVotes + (resource.voteCount || 0), // Include negative votes
          author: resource.author,
        });
      });

      // Convert to array and sort by absolute vote value to show most active users
      const sortedContributors = Array.from(userVotes.entries())
        .sort((a, b) => Math.abs(b[1].votes) - Math.abs(a[1].votes))
        .slice(0, 5); // Top 5 contributors

      // Update the UI
      topContributorsDiv.innerHTML =
        sortedContributors.length > 0
          ? sortedContributors
              .map(
                ([_, data], index) => `
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-2">
                  <span class="text-sm font-medium">${index + 1}.</span>
                  <div class="flex items-center gap-2">
                    <img src="${data.author.image?.small || "https://github.com/shadcn.png"}" 
                         alt="${data.author.name}" 
                         class="w-6 h-6 rounded-full" />
                    <span class="text-sm font-medium">${data.author.name}</span>
                  </div>
                </div>
                <span class="text-sm font-semibold ${
                  data.votes > 0
                    ? "text-green-500"
                    : data.votes < 0
                      ? "text-red-500"
                      : "text-gray-500"
                }">${
                  data.votes > 0
                    ? "+" + data.votes
                    : data.votes < 0
                      ? data.votes
                      : "0"
                }</span>
              </div>
            `,
              )
              .join("")
          : '<p class="text-sm text-gray-500">No contributors yet</p>';
    } catch (error) {
      console.error("Failed to update top contributors:", error);
      topContributorsDiv.innerHTML =
        '<p class="text-sm text-red-500">Failed to load contributors</p>';
    }
  }

  async function initializeHoverCards() {
    const UserMentionModule = await import("@/components/UserMention");
    const UserMention = UserMentionModule.default;

    document.querySelectorAll(".username-mention").forEach((element) => {
      const username = element.getAttribute("data-username");
      const name = element.getAttribute("data-name");
      const role = element.getAttribute("data-role");
      const image = element.getAttribute("data-image");
      const isStaff = element.getAttribute("data-is-staff") === "true";
      const usual_full_name =
        element.getAttribute("data-usual-full-name") || undefined;

      if (!username || !name || !role || !image) return;

      const container = document.createElement("div");
      container.className = "inline-block";
      element.parentElement?.insertBefore(container, element);
      element.remove();

      const root = ReactDOM.createRoot(container);
      root.render(
        React.createElement(UserMention, {
          username,
          name,
          role,
          image,
          isStaff,
          usual_full_name,
        }),
      );
    });
  }

  async function displayResourcesWithHoverCards(
    category: string = "",
    isCommentUpdate: boolean = false,
  ) {
    const resourcesList = document.getElementById("resources-list");
    if (!resourcesList) return;

    resourcesList.innerHTML =
      '<div class="text-center py-4">Loading resources...</div>';

    try {
      const resources = category
        ? await getResourcesByCategory(category)
        : await getSharedResources();

      // Don't clear and rebuild DOM for comment updates
      if (!isCommentUpdate) {
        resourcesList.innerHTML = resources.length
          ? ""
          : '<p class="text-gray-500">No resources shared yet</p>';

        resources.forEach((resource) => {
          resourcesList.appendChild(createResourceElement(resource));
        });

        // Initialize hover cards after resources are rendered
        initializeHoverCards();
        // Update top contributors
        updateTopContributors();
      }
    } catch (error) {
      console.error("Failed to load resources:", error);
      resourcesList.innerHTML =
        '<div class="text-red-500">Failed to load resources. Please try again later.</div>';
    }
  }

  async function handleResourceSubmission(event: SubmitEvent) {
    event.preventDefault();
    const form = event.target as HTMLFormElement;
    const user = getCurrentUser();

    if (!user) {
      console.error("No user found");
      return;
    }

    const userData = await getUserData(user.login);
    if (!userData) {
      console.error("Failed to fetch user data");
      return;
    }

    const submitButton = form.querySelector(
      'button[type="submit"]',
    ) as HTMLButtonElement;
    submitButton.disabled = true;
    submitButton.innerHTML = form.dataset.resourceId
      ? "Updating..."
      : "Saving...";

    try {
      const now = new Date();
      const resource: Resource = {
        id: form.dataset.resourceId || crypto.randomUUID(),
        title: (form.querySelector("#title") as HTMLInputElement).value,
        category: (form.querySelector('[name="category"]') as HTMLSelectElement)
          .value,
        description: (form.querySelector("#description") as HTMLTextAreaElement)
          .value,
        link: (form.querySelector("#link") as HTMLInputElement).value,
        author: {
          ...userData,
          "staff?": userData["staff?"] || false,
          image: {
            small: user.image?.versions?.small || null,
          },
        },
        timestamp: now.toISOString(),
        createdAt: form.dataset.createdAt
          ? new Date(form.dataset.createdAt)
          : now,
        updatedAt: now,
        status: "published",
        tags: [],
        votes: [],
        voteCount: 0,
        comments: [],
      };

      await saveResource(resource);
      form.reset();
      delete form.dataset.resourceId;
      delete form.dataset.createdAt;
      await displayResourcesWithHoverCards("");

      // Hide form after successful submission
      const formContainer = document.getElementById("resource-form-container");
      formContainer?.classList.add("hidden");

      // Reset submit button text
      submitButton.textContent = "Share Resource";

      // Show success message
      const alert = document.createElement("div");
      alert.className = "mb-4";
      alert.innerHTML = `<div class="bg-green-100 dark:bg-green-900 p-3 rounded text-green-700 dark:text-green-300">${form.dataset.resourceId ? "Resource updated" : "Resource shared"} successfully!</div>`;
      formContainer?.parentElement?.insertBefore(alert, formContainer);
      setTimeout(() => alert.remove(), 3000);
    } catch (error) {
      console.error("Failed to save resource:", error);
      const alert = document.createElement("div");
      alert.className = "mb-4";
      alert.innerHTML = `<div class="bg-red-100 dark:bg-red-900 p-3 rounded text-red-700 dark:text-red-300">Failed to ${form.dataset.resourceId ? "update" : "save"} resource. Please try again.</div>`;
      form.parentElement?.insertBefore(alert, form);
      setTimeout(() => alert.remove(), 3000);
    } finally {
      submitButton.disabled = false;
      submitButton.innerHTML = form.dataset.resourceId
        ? "Update Resource"
        : "Share Resource";
    }
  }

  // Add click handlers for category filter buttons
  document.querySelectorAll(".category-filter-btn").forEach((button) => {
    button.addEventListener("click", (e) => {
      const category = (e.target as HTMLButtonElement).dataset.category;
      if (category) {
        const event = new CustomEvent("categoryFilterChange", {
          detail: category,
        });
        document.dispatchEvent(event);
      }
    });
  });

  async function init() {
    try {
      const resourcesContent = document.getElementById("resources-content");
      const adminResources = document.getElementById("admin-resources");
      const studentResources = document.getElementById("student-resources");
      const authError = document.getElementById("auth-error");
      const showFormBtn = document.getElementById("show-form-btn");
      const formContainer = document.getElementById("resource-form-container");

      if (!isAuthenticated()) {
        authError?.classList.remove("hidden");
        setTimeout(() => {
          window.location.href = "/sign-in";
        }, 2000);
        return;
      }

      // Show content immediately
      resourcesContent?.classList.remove("opacity-0");
      resourcesContent?.classList.add("opacity-100");

      const user = getCurrentUser();
      if (!user) {
        console.error("No user found after authentication check");
        return;
      }

      // Show role-specific resources
      if (user.kind === "admin") {
        adminResources?.classList.remove("hidden");
      } else if (user.kind === "student") {
        studentResources?.classList.remove("hidden");
      }

      // Set up form submission
      const resourceForm = document.getElementById("resource-form");
      if (resourceForm) {
        resourceForm.addEventListener("submit", handleResourceSubmission);
      }

      // Set up show/hide form button
      if (showFormBtn && formContainer) {
        showFormBtn.addEventListener("click", () => {
          formContainer.classList.toggle("hidden");
          const form = document.getElementById(
            "resource-form",
          ) as HTMLFormElement;
          if (form) {
            form.reset();
            delete form.dataset.resourceId;
            delete form.dataset.createdAt;
            const submitBtn = form.querySelector(
              'button[type="submit"]',
            ) as HTMLButtonElement;
            if (submitBtn) {
              submitBtn.textContent = "Share Resource";
            }
          }
          if (!formContainer.classList.contains("hidden")) {
            formContainer.scrollIntoView({ behavior: "smooth" });
          }
        });
      }

      // Set up category filter
      document.addEventListener("categoryFilterChange", async (e) => {
        const customEvent = e as CustomEvent;
        await displayResourcesWithHoverCards(customEvent.detail, false);
      });

      // Set up edit/delete handlers
      document.addEventListener("click", async (e) => {
        const target = e.target as HTMLElement;

        // Handle edit button clicks
        if (target.closest(".edit-resource-btn")) {
          const resourceElement = target.closest(
            ".p-4.border.rounded-lg",
          ) as HTMLElement;
          if (!resourceElement) return;

          const titleElement = resourceElement.querySelector(
            "h3",
          ) as HTMLElement;
          const descriptionElement = resourceElement.querySelector(
            "p",
          ) as HTMLElement;
          const linkElement = resourceElement.querySelector(
            "a",
          ) as HTMLAnchorElement;
          const categoryElement = resourceElement.querySelector(
            ".bg-gray-100",
          ) as HTMLElement;

          if (
            !titleElement ||
            !descriptionElement ||
            !linkElement ||
            !categoryElement
          )
            return;

          const form = document.getElementById(
            "resource-form",
          ) as HTMLFormElement;
          const formContainer = document.getElementById(
            "resource-form-container",
          );
          if (!form || !formContainer) return;

          // Populate form with resource data
          (form.querySelector("#title") as HTMLInputElement).value =
            titleElement.textContent || "";
          (form.querySelector("#description") as HTMLTextAreaElement).value =
            descriptionElement.textContent || "";
          (form.querySelector("#link") as HTMLInputElement).value =
            linkElement.href;
          (form.querySelector('[name="category"]') as HTMLSelectElement).value =
            categoryElement.textContent || "";

          // Set form data for update
          const resourceId = resourceElement.dataset.resourceId;
          if (resourceId) {
            form.dataset.resourceId = resourceId;
          }

          // Show form
          formContainer.classList.remove("hidden");
          formContainer.scrollIntoView({ behavior: "smooth" });

          // Update submit button text
          const submitBtn = form.querySelector(
            'button[type="submit"]',
          ) as HTMLButtonElement;
          if (submitBtn) {
            submitBtn.textContent = "Update Resource";
          }
        }

        // Handle delete button clicks
        if (target.closest(".delete-resource-btn")) {
          const resourceElement = target.closest(
            ".p-4.border.rounded-lg",
          ) as HTMLElement;
          if (!resourceElement) return;

          const resourceId = resourceElement.dataset.resourceId;
          if (!resourceId) return;

          if (confirm("Are you sure you want to delete this resource?")) {
            try {
              await deleteResource(resourceId);
              await displayResourcesWithHoverCards("");
            } catch (error) {
              console.error("Failed to delete resource:", error);
              alert("Failed to delete resource. Please try again.");
            }
          }
        }
      });

      // Load initial resources (not a comment update)
      await displayResourcesWithHoverCards("", false);
    } catch (error) {
      console.error("Failed to initialize resources page:", error);
      const resourcesContent = document.getElementById("resources-content");
      if (resourcesContent) {
        resourcesContent.innerHTML =
          '<div class="text-red-500 p-4">Failed to load resources. Please try again later.</div>';
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", init);

  // Set up search functionality
  document.getElementById("resource-search")?.addEventListener("input", (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    const resourcesList = document.getElementById("resources-list");
    if (!resourcesList) return;

    // Get all resource cards
    const resourceCards = resourcesList.querySelectorAll(
      ".p-4.border.rounded-lg",
    );
    resourceCards.forEach((card) => {
      const title = card.querySelector("h3")?.textContent?.toLowerCase() || "";
      const description =
        card.querySelector("p")?.textContent?.toLowerCase() || "";

      if (title.includes(searchTerm) || description.includes(searchTerm)) {
        (card as HTMLElement).style.display = "block";
      } else {
        (card as HTMLElement).style.display = "none";
      }
    });
  });
</script>
